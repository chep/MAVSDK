// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/lumos_server/lumos_server.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "server_plugin_base.h"

#include "handle.h"

namespace mavsdk {

class ServerComponent;
class LumosServerImpl;

/**
 * @brief
 */
class LumosServer : public ServerPluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a ServerComponent instance.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto lumos_server = LumosServer(server_component);
     *     ```
     *
     * @param server_component The ServerComponent instance associated with this server plugin.
     */
    explicit LumosServer(std::shared_ptr<ServerComponent> server_component);

    /**
     * @brief Destructor (internal use only).
     */
    ~LumosServer() override;

    /**
     * @brief
     */
    struct Dance {
        std::vector<uint32_t> data{}; /**< @brief */
        uint32_t len{}; /**< @brief */
    };

    /**
     * @brief Equal operator to compare two `LumosServer::Dance` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const LumosServer::Dance& lhs, const LumosServer::Dance& rhs);

    /**
     * @brief Stream operator to print information about a `LumosServer::Dance`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, LumosServer::Dance const& dance);

    /**
     * @brief Possible results returned for commands
     */
    enum class Result {
        Success, /**< @brief. */
        Error, /**< @brief. */
    };

    /**
     * @brief Stream operator to print information about a `LumosServer::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, LumosServer::Result const& result);

    /**
     * @brief
     */
    struct DroneInfo {
        std::string uuid{}; /**< @brief<  uuid */
        uint32_t fw_major{}; /**< @brief<  Firmware version major (first byte) */
        uint32_t fw_minor{}; /**< @brief<  Firmware version minor (second byte) */
        uint32_t fw_patch{}; /**< @brief<  Firmware version patch (third byte) */
    };

    /**
     * @brief Equal operator to compare two `LumosServer::DroneInfo` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool operator==(const LumosServer::DroneInfo& lhs, const LumosServer::DroneInfo& rhs);

    /**
     * @brief Stream operator to print information about a `LumosServer::DroneInfo`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, LumosServer::DroneInfo const& drone_info);

    /**
     * @brief
     */
    struct CompanionStatus {
        uint32_t dance_status{}; /**< @brief */
        uint32_t rssi_wifi{}; /**< @brief */
        uint32_t rssi_xbee{}; /**< @brief */
    };

    /**
     * @brief Equal operator to compare two `LumosServer::CompanionStatus` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool
    operator==(const LumosServer::CompanionStatus& lhs, const LumosServer::CompanionStatus& rhs);

    /**
     * @brief Stream operator to print information about a `LumosServer::CompanionStatus`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, LumosServer::CompanionStatus const& companion_status);

    /**
     * @brief Callback type for asynchronous LumosServer calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    void set_drone_info(DroneInfo drone_info) const;

    /**
     * @brief
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    void set_companion_status(CompanionStatus drone_info) const;

    /**
     * @brief Callback type for subscribe_dance.
     */
    using DanceCallback = std::function<void(Dance)>;

    /**
     * @brief Handle type for subscribe_dance.
     */
    using DanceHandle = Handle<Dance>;

    /**
     * @brief
     */
    DanceHandle subscribe_dance(const DanceCallback& callback);

    /**
     * @brief Unsubscribe from subscribe_dance
     */
    void unsubscribe_dance(DanceHandle handle);

    /**
     * @brief Poll for 'Dance' (blocking).
     *
     * @return One Dance update.
     */
    Dance dance() const;

    /**
     * @brief Copy constructor.
     */
    LumosServer(const LumosServer& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const LumosServer& operator=(const LumosServer&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<LumosServerImpl> _impl;
};

} // namespace mavsdk