// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/main/protos/lumos_server/lumos_server.proto)

#pragma once

#include <array>
#include <cmath>
#include <functional>
#include <limits>
#include <memory>
#include <string>
#include <utility>
#include <vector>

#include "server_plugin_base.h"

#include "handle.h"

namespace mavsdk {

class ServerComponent;
class LumosServerImpl;

/**
 * @brief
 */
class LumosServer : public ServerPluginBase {
public:
    /**
     * @brief Constructor. Creates the plugin for a ServerComponent instance.
     *
     * The plugin is typically created as shown below:
     *
     *     ```cpp
     *     auto lumos_server = LumosServer(server_component);
     *     ```
     *
     * @param server_component The ServerComponent instance associated with this server plugin.
     */
    explicit LumosServer(std::shared_ptr<ServerComponent> server_component);

    /**
     * @brief Destructor (internal use only).
     */
    ~LumosServer() override;

    /**
     * @brief Possible results returned for commands
     */
    enum class Result {
        Success, /**< @brief. */
        Error, /**< @brief. */
    };

    /**
     * @brief Stream operator to print information about a `LumosServer::Result`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream& operator<<(std::ostream& str, LumosServer::Result const& result);

    /**
     * @brief
     */
    struct DroneStatus {
        float battery_status{}; /**< @brief */
        int32_t lat{}; /**< @brief<  [degE7] Latitude (WGS84, EGM96 ellipsoid) */
        int32_t lon{}; /**< @brief<  [degE7] Longitude (WGS84, EGM96 ellipsoid) */
        int32_t alt{}; /**< @brief<  [mm] Altitude (AGL) */
        float mag_norm{}; /**< @brief<  Magnetometer norm */
        uint32_t hdg{}; /**< @brief<  [cdeg] Vehicle heading (yaw angle), 0.0..359.99 degrees. If
                           unknown, set to: UINT16_MAX */
        std::string uuid{}; /**< @brief<  uuid */
        uint32_t fw_major{}; /**< @brief<  Firmware version major (first byte) */
        uint32_t fw_minor{}; /**< @brief<  Firmware version minor (second byte) */
        uint32_t fw_patch{}; /**< @brief<  Firmware version patch (third byte) */
        uint32_t dance_status{}; /**< @brief<  Dance status */
        uint32_t rssi_wifi{}; /**< @brief<  Rssi wifi */
        uint32_t rssi_xbee{}; /**< @brief<  Rssi XBee */
        uint32_t satellites_used{}; /**< @brief<  Number of satellites used */
        uint32_t fix_type{}; /**< @brief<  GPS fix type */
        uint32_t alt_ref{}; /**< @brief<  Alt reference status, boolean */
    };

    /**
     * @brief Equal operator to compare two `LumosServer::DroneStatus` objects.
     *
     * @return `true` if items are equal.
     */
    friend bool
    operator==(const LumosServer::DroneStatus& lhs, const LumosServer::DroneStatus& rhs);

    /**
     * @brief Stream operator to print information about a `LumosServer::DroneStatus`.
     *
     * @return A reference to the stream.
     */
    friend std::ostream&
    operator<<(std::ostream& str, LumosServer::DroneStatus const& drone_status);

    /**
     * @brief Callback type for asynchronous LumosServer calls.
     */
    using ResultCallback = std::function<void(Result)>;

    /**
     * @brief
     *
     * This function is blocking.
     *
     * @return Result of request.
     */
    void set_drone_status(DroneStatus drone_status) const;

    /**
     * @brief Copy constructor.
     */
    LumosServer(const LumosServer& other);

    /**
     * @brief Equality operator (object is not copyable).
     */
    const LumosServer& operator=(const LumosServer&) = delete;

private:
    /** @private Underlying implementation, set at instantiation */
    std::unique_ptr<LumosServerImpl> _impl;
};

} // namespace mavsdk
