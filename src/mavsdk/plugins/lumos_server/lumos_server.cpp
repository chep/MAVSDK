// WARNING: THIS FILE IS AUTOGENERATED! As such, it should not be edited.
// Edits need to be made to the proto files
// (see https://github.com/mavlink/MAVSDK-Proto/blob/master/protos/lumos_server/lumos_server.proto)

#include <iomanip>

#include "lumos_server_impl.h"
#include "plugins/lumos_server/lumos_server.h"

namespace mavsdk {

using Dance = LumosServer::Dance;

using DroneInfo = LumosServer::DroneInfo;
using CompanionStatus = LumosServer::CompanionStatus;

LumosServer::LumosServer(std::shared_ptr<ServerComponent> server_component) :
    ServerPluginBase(),
    _impl{std::make_unique<LumosServerImpl>(server_component)}
{}

LumosServer::~LumosServer() {}

void LumosServer::set_drone_info(DroneInfo drone_info) const
{
    _impl->set_drone_info(drone_info);
}

void LumosServer::set_companion_status(CompanionStatus drone_info) const
{
    _impl->set_companion_status(drone_info);
}

LumosServer::DanceHandle LumosServer::subscribe_dance(const DanceCallback& callback)
{
    return _impl->subscribe_dance(callback);
}

void LumosServer::unsubscribe_dance(DanceHandle handle)
{
    _impl->unsubscribe_dance(handle);
}

LumosServer::Dance LumosServer::dance() const
{
    return _impl->dance();
}

bool operator==(const LumosServer::Dance& lhs, const LumosServer::Dance& rhs)
{
    return (rhs.data == lhs.data) && (rhs.len == lhs.len);
}

std::ostream& operator<<(std::ostream& str, LumosServer::Dance const& dance)
{
    str << std::setprecision(15);
    str << "dance:" << '\n' << "{\n";
    str << "    data: [";
    for (auto it = dance.data.begin(); it != dance.data.end(); ++it) {
        str << *it;
        str << (it + 1 != dance.data.end() ? ", " : "]\n");
    }
    str << "    len: " << dance.len << '\n';
    str << '}';
    return str;
}

std::ostream& operator<<(std::ostream& str, LumosServer::Result const& result)
{
    switch (result) {
        case LumosServer::Result::Success:
            return str << "Success";
        case LumosServer::Result::Error:
            return str << "Error";
        default:
            return str << "Unknown";
    }
}

bool operator==(const LumosServer::DroneInfo& lhs, const LumosServer::DroneInfo& rhs)
{
    return (rhs.uuid == lhs.uuid) && (rhs.fw_major == lhs.fw_major) &&
           (rhs.fw_minor == lhs.fw_minor) && (rhs.fw_patch == lhs.fw_patch);
}

std::ostream& operator<<(std::ostream& str, LumosServer::DroneInfo const& drone_info)
{
    str << std::setprecision(15);
    str << "drone_info:" << '\n' << "{\n";
    str << "    uuid: " << drone_info.uuid << '\n';
    str << "    fw_major: " << drone_info.fw_major << '\n';
    str << "    fw_minor: " << drone_info.fw_minor << '\n';
    str << "    fw_patch: " << drone_info.fw_patch << '\n';
    str << '}';
    return str;
}

bool operator==(const LumosServer::CompanionStatus& lhs, const LumosServer::CompanionStatus& rhs)
{
    return (rhs.dance_status == lhs.dance_status) && (rhs.rssi_wifi == lhs.rssi_wifi) &&
           (rhs.rssi_xbee == lhs.rssi_xbee);
}

std::ostream& operator<<(std::ostream& str, LumosServer::CompanionStatus const& companion_status)
{
    str << std::setprecision(15);
    str << "companion_status:" << '\n' << "{\n";
    str << "    dance_status: " << companion_status.dance_status << '\n';
    str << "    rssi_wifi: " << companion_status.rssi_wifi << '\n';
    str << "    rssi_xbee: " << companion_status.rssi_xbee << '\n';
    str << '}';
    return str;
}

} // namespace mavsdk