// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: camera_server/camera_server.proto
// Protobuf C++ Version: 4.25.0

#ifndef GOOGLE_PROTOBUF_INCLUDED_camera_5fserver_2fcamera_5fserver_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_camera_5fserver_2fcamera_5fserver_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "mavsdk_options.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_camera_5fserver_2fcamera_5fserver_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_camera_5fserver_2fcamera_5fserver_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_camera_5fserver_2fcamera_5fserver_2eproto;
namespace mavsdk {
namespace rpc {
namespace camera_server {
class CameraServerResult;
struct CameraServerResultDefaultTypeInternal;
extern CameraServerResultDefaultTypeInternal _CameraServerResult_default_instance_;
class CaptureInfo;
struct CaptureInfoDefaultTypeInternal;
extern CaptureInfoDefaultTypeInternal _CaptureInfo_default_instance_;
class Information;
struct InformationDefaultTypeInternal;
extern InformationDefaultTypeInternal _Information_default_instance_;
class Position;
struct PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
class Quaternion;
struct QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class RespondTakePhotoRequest;
struct RespondTakePhotoRequestDefaultTypeInternal;
extern RespondTakePhotoRequestDefaultTypeInternal _RespondTakePhotoRequest_default_instance_;
class RespondTakePhotoResponse;
struct RespondTakePhotoResponseDefaultTypeInternal;
extern RespondTakePhotoResponseDefaultTypeInternal _RespondTakePhotoResponse_default_instance_;
class SetInProgressRequest;
struct SetInProgressRequestDefaultTypeInternal;
extern SetInProgressRequestDefaultTypeInternal _SetInProgressRequest_default_instance_;
class SetInProgressResponse;
struct SetInProgressResponseDefaultTypeInternal;
extern SetInProgressResponseDefaultTypeInternal _SetInProgressResponse_default_instance_;
class SetInformationRequest;
struct SetInformationRequestDefaultTypeInternal;
extern SetInformationRequestDefaultTypeInternal _SetInformationRequest_default_instance_;
class SetInformationResponse;
struct SetInformationResponseDefaultTypeInternal;
extern SetInformationResponseDefaultTypeInternal _SetInformationResponse_default_instance_;
class SubscribeTakePhotoRequest;
struct SubscribeTakePhotoRequestDefaultTypeInternal;
extern SubscribeTakePhotoRequestDefaultTypeInternal _SubscribeTakePhotoRequest_default_instance_;
class TakePhotoResponse;
struct TakePhotoResponseDefaultTypeInternal;
extern TakePhotoResponseDefaultTypeInternal _TakePhotoResponse_default_instance_;
}  // namespace camera_server
}  // namespace rpc
}  // namespace mavsdk
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace mavsdk {
namespace rpc {
namespace camera_server {
enum CameraServerResult_Result : int {
  CameraServerResult_Result_RESULT_UNKNOWN = 0,
  CameraServerResult_Result_RESULT_SUCCESS = 1,
  CameraServerResult_Result_RESULT_IN_PROGRESS = 2,
  CameraServerResult_Result_RESULT_BUSY = 3,
  CameraServerResult_Result_RESULT_DENIED = 4,
  CameraServerResult_Result_RESULT_ERROR = 5,
  CameraServerResult_Result_RESULT_TIMEOUT = 6,
  CameraServerResult_Result_RESULT_WRONG_ARGUMENT = 7,
  CameraServerResult_Result_RESULT_NO_SYSTEM = 8,
  CameraServerResult_Result_CameraServerResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CameraServerResult_Result_CameraServerResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CameraServerResult_Result_IsValid(int value);
extern const uint32_t CameraServerResult_Result_internal_data_[];
constexpr CameraServerResult_Result CameraServerResult_Result_Result_MIN = static_cast<CameraServerResult_Result>(0);
constexpr CameraServerResult_Result CameraServerResult_Result_Result_MAX = static_cast<CameraServerResult_Result>(8);
constexpr int CameraServerResult_Result_Result_ARRAYSIZE = 8 + 1;
const ::google::protobuf::EnumDescriptor*
CameraServerResult_Result_descriptor();
template <typename T>
const std::string& CameraServerResult_Result_Name(T value) {
  static_assert(std::is_same<T, CameraServerResult_Result>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Result_Name().");
  return CameraServerResult_Result_Name(static_cast<CameraServerResult_Result>(value));
}
template <>
inline const std::string& CameraServerResult_Result_Name(CameraServerResult_Result value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CameraServerResult_Result_descriptor,
                                                 0, 8>(
      static_cast<int>(value));
}
inline bool CameraServerResult_Result_Parse(absl::string_view name, CameraServerResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CameraServerResult_Result>(
      CameraServerResult_Result_descriptor(), name, value);
}
enum TakePhotoFeedback : int {
  TAKE_PHOTO_FEEDBACK_UNKNOWN = 0,
  TAKE_PHOTO_FEEDBACK_OK = 1,
  TAKE_PHOTO_FEEDBACK_BUSY = 2,
  TAKE_PHOTO_FEEDBACK_FAILED = 3,
  TakePhotoFeedback_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TakePhotoFeedback_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TakePhotoFeedback_IsValid(int value);
extern const uint32_t TakePhotoFeedback_internal_data_[];
constexpr TakePhotoFeedback TakePhotoFeedback_MIN = static_cast<TakePhotoFeedback>(0);
constexpr TakePhotoFeedback TakePhotoFeedback_MAX = static_cast<TakePhotoFeedback>(3);
constexpr int TakePhotoFeedback_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
TakePhotoFeedback_descriptor();
template <typename T>
const std::string& TakePhotoFeedback_Name(T value) {
  static_assert(std::is_same<T, TakePhotoFeedback>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TakePhotoFeedback_Name().");
  return TakePhotoFeedback_Name(static_cast<TakePhotoFeedback>(value));
}
template <>
inline const std::string& TakePhotoFeedback_Name(TakePhotoFeedback value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TakePhotoFeedback_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TakePhotoFeedback_Parse(absl::string_view name, TakePhotoFeedback* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TakePhotoFeedback>(
      TakePhotoFeedback_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TakePhotoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.TakePhotoResponse) */ {
 public:
  inline TakePhotoResponse() : TakePhotoResponse(nullptr) {}
  ~TakePhotoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR TakePhotoResponse(::google::protobuf::internal::ConstantInitialized);

  inline TakePhotoResponse(const TakePhotoResponse& from)
      : TakePhotoResponse(nullptr, from) {}
  TakePhotoResponse(TakePhotoResponse&& from) noexcept
    : TakePhotoResponse() {
    *this = ::std::move(from);
  }

  inline TakePhotoResponse& operator=(const TakePhotoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TakePhotoResponse& operator=(TakePhotoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TakePhotoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TakePhotoResponse* internal_default_instance() {
    return reinterpret_cast<const TakePhotoResponse*>(
               &_TakePhotoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TakePhotoResponse& a, TakePhotoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TakePhotoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TakePhotoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TakePhotoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TakePhotoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TakePhotoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const TakePhotoResponse& from) {
    TakePhotoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(TakePhotoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.camera_server.TakePhotoResponse";
  }
  protected:
  explicit TakePhotoResponse(::google::protobuf::Arena* arena);
  TakePhotoResponse(::google::protobuf::Arena* arena, const TakePhotoResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // int32 index = 1;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.TakePhotoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::int32_t index_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};// -------------------------------------------------------------------

class SubscribeTakePhotoRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SubscribeTakePhotoRequest) */ {
 public:
  inline SubscribeTakePhotoRequest() : SubscribeTakePhotoRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeTakePhotoRequest(::google::protobuf::internal::ConstantInitialized);

  inline SubscribeTakePhotoRequest(const SubscribeTakePhotoRequest& from)
      : SubscribeTakePhotoRequest(nullptr, from) {}
  SubscribeTakePhotoRequest(SubscribeTakePhotoRequest&& from) noexcept
    : SubscribeTakePhotoRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeTakePhotoRequest& operator=(const SubscribeTakePhotoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTakePhotoRequest& operator=(SubscribeTakePhotoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeTakePhotoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeTakePhotoRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeTakePhotoRequest*>(
               &_SubscribeTakePhotoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscribeTakePhotoRequest& a, SubscribeTakePhotoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeTakePhotoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTakePhotoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeTakePhotoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SubscribeTakePhotoRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SubscribeTakePhotoRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SubscribeTakePhotoRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.camera_server.SubscribeTakePhotoRequest";
  }
  protected:
  explicit SubscribeTakePhotoRequest(::google::protobuf::Arena* arena);
  SubscribeTakePhotoRequest(::google::protobuf::Arena* arena, const SubscribeTakePhotoRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SubscribeTakePhotoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};// -------------------------------------------------------------------

class SetInProgressRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SetInProgressRequest) */ {
 public:
  inline SetInProgressRequest() : SetInProgressRequest(nullptr) {}
  ~SetInProgressRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetInProgressRequest(::google::protobuf::internal::ConstantInitialized);

  inline SetInProgressRequest(const SetInProgressRequest& from)
      : SetInProgressRequest(nullptr, from) {}
  SetInProgressRequest(SetInProgressRequest&& from) noexcept
    : SetInProgressRequest() {
    *this = ::std::move(from);
  }

  inline SetInProgressRequest& operator=(const SetInProgressRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInProgressRequest& operator=(SetInProgressRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInProgressRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInProgressRequest* internal_default_instance() {
    return reinterpret_cast<const SetInProgressRequest*>(
               &_SetInProgressRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetInProgressRequest& a, SetInProgressRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInProgressRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInProgressRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInProgressRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetInProgressRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetInProgressRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetInProgressRequest& from) {
    SetInProgressRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetInProgressRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.camera_server.SetInProgressRequest";
  }
  protected:
  explicit SetInProgressRequest(::google::protobuf::Arena* arena);
  SetInProgressRequest(::google::protobuf::Arena* arena, const SetInProgressRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInProgressFieldNumber = 1,
  };
  // bool in_progress = 1;
  void clear_in_progress() ;
  bool in_progress() const;
  void set_in_progress(bool value);

  private:
  bool _internal_in_progress() const;
  void _internal_set_in_progress(bool value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SetInProgressRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    bool in_progress_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};// -------------------------------------------------------------------

class Quaternion final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.Quaternion) */ {
 public:
  inline Quaternion() : Quaternion(nullptr) {}
  ~Quaternion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Quaternion(::google::protobuf::internal::ConstantInitialized);

  inline Quaternion(const Quaternion& from)
      : Quaternion(nullptr, from) {}
  Quaternion(Quaternion&& from) noexcept
    : Quaternion() {
    *this = ::std::move(from);
  }

  inline Quaternion& operator=(const Quaternion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quaternion& operator=(Quaternion&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quaternion& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quaternion* internal_default_instance() {
    return reinterpret_cast<const Quaternion*>(
               &_Quaternion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Quaternion& a, Quaternion& b) {
    a.Swap(&b);
  }
  inline void Swap(Quaternion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quaternion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quaternion* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quaternion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Quaternion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Quaternion& from) {
    Quaternion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Quaternion* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.camera_server.Quaternion";
  }
  protected:
  explicit Quaternion(::google::protobuf::Arena* arena);
  Quaternion(::google::protobuf::Arena* arena, const Quaternion& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
  };
  // float w = 1;
  void clear_w() ;
  float w() const;
  void set_w(float value);

  private:
  float _internal_w() const;
  void _internal_set_w(float value);

  public:
  // float x = 2;
  void clear_x() ;
  float x() const;
  void set_x(float value);

  private:
  float _internal_x() const;
  void _internal_set_x(float value);

  public:
  // float y = 3;
  void clear_y() ;
  float y() const;
  void set_y(float value);

  private:
  float _internal_y() const;
  void _internal_set_y(float value);

  public:
  // float z = 4;
  void clear_z() ;
  float z() const;
  void set_z(float value);

  private:
  float _internal_z() const;
  void _internal_set_z(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.Quaternion)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    float w_;
    float x_;
    float y_;
    float z_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};// -------------------------------------------------------------------

class Position final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.Position) */ {
 public:
  inline Position() : Position(nullptr) {}
  ~Position() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Position(::google::protobuf::internal::ConstantInitialized);

  inline Position(const Position& from)
      : Position(nullptr, from) {}
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline Position& operator=(Position&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Position& default_instance() {
    return *internal_default_instance();
  }
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }
  inline void Swap(Position* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Position* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Position* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Position& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Position& from) {
    Position::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Position* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.camera_server.Position";
  }
  protected:
  explicit Position(::google::protobuf::Arena* arena);
  Position(::google::protobuf::Arena* arena, const Position& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAbsoluteAltitudeMFieldNumber = 3,
    kRelativeAltitudeMFieldNumber = 4,
  };
  // double latitude_deg = 1;
  void clear_latitude_deg() ;
  double latitude_deg() const;
  void set_latitude_deg(double value);

  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);

  public:
  // double longitude_deg = 2;
  void clear_longitude_deg() ;
  double longitude_deg() const;
  void set_longitude_deg(double value);

  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);

  public:
  // float absolute_altitude_m = 3;
  void clear_absolute_altitude_m() ;
  float absolute_altitude_m() const;
  void set_absolute_altitude_m(float value);

  private:
  float _internal_absolute_altitude_m() const;
  void _internal_set_absolute_altitude_m(float value);

  public:
  // float relative_altitude_m = 4;
  void clear_relative_altitude_m() ;
  float relative_altitude_m() const;
  void set_relative_altitude_m(float value);

  private:
  float _internal_relative_altitude_m() const;
  void _internal_set_relative_altitude_m(float value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.Position)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    double latitude_deg_;
    double longitude_deg_;
    float absolute_altitude_m_;
    float relative_altitude_m_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};// -------------------------------------------------------------------

class Information final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.Information) */ {
 public:
  inline Information() : Information(nullptr) {}
  ~Information() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR Information(::google::protobuf::internal::ConstantInitialized);

  inline Information(const Information& from)
      : Information(nullptr, from) {}
  Information(Information&& from) noexcept
    : Information() {
    *this = ::std::move(from);
  }

  inline Information& operator=(const Information& from) {
    CopyFrom(from);
    return *this;
  }
  inline Information& operator=(Information&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Information& default_instance() {
    return *internal_default_instance();
  }
  static inline const Information* internal_default_instance() {
    return reinterpret_cast<const Information*>(
               &_Information_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Information& a, Information& b) {
    a.Swap(&b);
  }
  inline void Swap(Information* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Information* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Information* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Information>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Information& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const Information& from) {
    Information::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(Information* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.camera_server.Information";
  }
  protected:
  explicit Information(::google::protobuf::Arena* arena);
  Information(::google::protobuf::Arena* arena, const Information& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVendorNameFieldNumber = 1,
    kModelNameFieldNumber = 2,
    kFirmwareVersionFieldNumber = 3,
    kDefinitionFileUriFieldNumber = 11,
    kFocalLengthMmFieldNumber = 4,
    kHorizontalSensorSizeMmFieldNumber = 5,
    kVerticalSensorSizeMmFieldNumber = 6,
    kHorizontalResolutionPxFieldNumber = 7,
    kVerticalResolutionPxFieldNumber = 8,
    kLensIdFieldNumber = 9,
    kDefinitionFileVersionFieldNumber = 10,
  };
  // string vendor_name = 1;
  void clear_vendor_name() ;
  const std::string& vendor_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_vendor_name(Arg_&& arg, Args_... args);
  std::string* mutable_vendor_name();
  PROTOBUF_NODISCARD std::string* release_vendor_name();
  void set_allocated_vendor_name(std::string* value);

  private:
  const std::string& _internal_vendor_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_vendor_name(
      const std::string& value);
  std::string* _internal_mutable_vendor_name();

  public:
  // string model_name = 2;
  void clear_model_name() ;
  const std::string& model_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_name(Arg_&& arg, Args_... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* value);

  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(
      const std::string& value);
  std::string* _internal_mutable_model_name();

  public:
  // string firmware_version = 3;
  void clear_firmware_version() ;
  const std::string& firmware_version() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_firmware_version(Arg_&& arg, Args_... args);
  std::string* mutable_firmware_version();
  PROTOBUF_NODISCARD std::string* release_firmware_version();
  void set_allocated_firmware_version(std::string* value);

  private:
  const std::string& _internal_firmware_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firmware_version(
      const std::string& value);
  std::string* _internal_mutable_firmware_version();

  public:
  // string definition_file_uri = 11;
  void clear_definition_file_uri() ;
  const std::string& definition_file_uri() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_definition_file_uri(Arg_&& arg, Args_... args);
  std::string* mutable_definition_file_uri();
  PROTOBUF_NODISCARD std::string* release_definition_file_uri();
  void set_allocated_definition_file_uri(std::string* value);

  private:
  const std::string& _internal_definition_file_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_definition_file_uri(
      const std::string& value);
  std::string* _internal_mutable_definition_file_uri();

  public:
  // float focal_length_mm = 4;
  void clear_focal_length_mm() ;
  float focal_length_mm() const;
  void set_focal_length_mm(float value);

  private:
  float _internal_focal_length_mm() const;
  void _internal_set_focal_length_mm(float value);

  public:
  // float horizontal_sensor_size_mm = 5;
  void clear_horizontal_sensor_size_mm() ;
  float horizontal_sensor_size_mm() const;
  void set_horizontal_sensor_size_mm(float value);

  private:
  float _internal_horizontal_sensor_size_mm() const;
  void _internal_set_horizontal_sensor_size_mm(float value);

  public:
  // float vertical_sensor_size_mm = 6;
  void clear_vertical_sensor_size_mm() ;
  float vertical_sensor_size_mm() const;
  void set_vertical_sensor_size_mm(float value);

  private:
  float _internal_vertical_sensor_size_mm() const;
  void _internal_set_vertical_sensor_size_mm(float value);

  public:
  // uint32 horizontal_resolution_px = 7;
  void clear_horizontal_resolution_px() ;
  ::uint32_t horizontal_resolution_px() const;
  void set_horizontal_resolution_px(::uint32_t value);

  private:
  ::uint32_t _internal_horizontal_resolution_px() const;
  void _internal_set_horizontal_resolution_px(::uint32_t value);

  public:
  // uint32 vertical_resolution_px = 8;
  void clear_vertical_resolution_px() ;
  ::uint32_t vertical_resolution_px() const;
  void set_vertical_resolution_px(::uint32_t value);

  private:
  ::uint32_t _internal_vertical_resolution_px() const;
  void _internal_set_vertical_resolution_px(::uint32_t value);

  public:
  // uint32 lens_id = 9;
  void clear_lens_id() ;
  ::uint32_t lens_id() const;
  void set_lens_id(::uint32_t value);

  private:
  ::uint32_t _internal_lens_id() const;
  void _internal_set_lens_id(::uint32_t value);

  public:
  // uint32 definition_file_version = 10;
  void clear_definition_file_version() ;
  ::uint32_t definition_file_version() const;
  void set_definition_file_version(::uint32_t value);

  private:
  ::uint32_t _internal_definition_file_version() const;
  void _internal_set_definition_file_version(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.Information)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      109, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr vendor_name_;
    ::google::protobuf::internal::ArenaStringPtr model_name_;
    ::google::protobuf::internal::ArenaStringPtr firmware_version_;
    ::google::protobuf::internal::ArenaStringPtr definition_file_uri_;
    float focal_length_mm_;
    float horizontal_sensor_size_mm_;
    float vertical_sensor_size_mm_;
    ::uint32_t horizontal_resolution_px_;
    ::uint32_t vertical_resolution_px_;
    ::uint32_t lens_id_;
    ::uint32_t definition_file_version_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};// -------------------------------------------------------------------

class CameraServerResult final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.CameraServerResult) */ {
 public:
  inline CameraServerResult() : CameraServerResult(nullptr) {}
  ~CameraServerResult() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CameraServerResult(::google::protobuf::internal::ConstantInitialized);

  inline CameraServerResult(const CameraServerResult& from)
      : CameraServerResult(nullptr, from) {}
  CameraServerResult(CameraServerResult&& from) noexcept
    : CameraServerResult() {
    *this = ::std::move(from);
  }

  inline CameraServerResult& operator=(const CameraServerResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraServerResult& operator=(CameraServerResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CameraServerResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraServerResult* internal_default_instance() {
    return reinterpret_cast<const CameraServerResult*>(
               &_CameraServerResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CameraServerResult& a, CameraServerResult& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraServerResult* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraServerResult* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CameraServerResult* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CameraServerResult>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CameraServerResult& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CameraServerResult& from) {
    CameraServerResult::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CameraServerResult* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.camera_server.CameraServerResult";
  }
  protected:
  explicit CameraServerResult(::google::protobuf::Arena* arena);
  CameraServerResult(::google::protobuf::Arena* arena, const CameraServerResult& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using Result = CameraServerResult_Result;
  static constexpr Result RESULT_UNKNOWN = CameraServerResult_Result_RESULT_UNKNOWN;
  static constexpr Result RESULT_SUCCESS = CameraServerResult_Result_RESULT_SUCCESS;
  static constexpr Result RESULT_IN_PROGRESS = CameraServerResult_Result_RESULT_IN_PROGRESS;
  static constexpr Result RESULT_BUSY = CameraServerResult_Result_RESULT_BUSY;
  static constexpr Result RESULT_DENIED = CameraServerResult_Result_RESULT_DENIED;
  static constexpr Result RESULT_ERROR = CameraServerResult_Result_RESULT_ERROR;
  static constexpr Result RESULT_TIMEOUT = CameraServerResult_Result_RESULT_TIMEOUT;
  static constexpr Result RESULT_WRONG_ARGUMENT = CameraServerResult_Result_RESULT_WRONG_ARGUMENT;
  static constexpr Result RESULT_NO_SYSTEM = CameraServerResult_Result_RESULT_NO_SYSTEM;
  static inline bool Result_IsValid(int value) {
    return CameraServerResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN = CameraServerResult_Result_Result_MIN;
  static constexpr Result Result_MAX = CameraServerResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE = CameraServerResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* Result_descriptor() {
    return CameraServerResult_Result_descriptor();
  }
  template <typename T>
  static inline const std::string& Result_Name(T value) {
    return CameraServerResult_Result_Name(value);
  }
  static inline bool Result_Parse(absl::string_view name, Result* value) {
    return CameraServerResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str() ;
  const std::string& result_str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_result_str(Arg_&& arg, Args_... args);
  std::string* mutable_result_str();
  PROTOBUF_NODISCARD std::string* release_result_str();
  void set_allocated_result_str(std::string* value);

  private:
  const std::string& _internal_result_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result_str(
      const std::string& value);
  std::string* _internal_mutable_result_str();

  public:
  // .mavsdk.rpc.camera_server.CameraServerResult.Result result = 1;
  void clear_result() ;
  ::mavsdk::rpc::camera_server::CameraServerResult_Result result() const;
  void set_result(::mavsdk::rpc::camera_server::CameraServerResult_Result value);

  private:
  ::mavsdk::rpc::camera_server::CameraServerResult_Result _internal_result() const;
  void _internal_set_result(::mavsdk::rpc::camera_server::CameraServerResult_Result value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.CameraServerResult)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      62, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr result_str_;
    int result_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};// -------------------------------------------------------------------

class SetInformationResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SetInformationResponse) */ {
 public:
  inline SetInformationResponse() : SetInformationResponse(nullptr) {}
  ~SetInformationResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetInformationResponse(::google::protobuf::internal::ConstantInitialized);

  inline SetInformationResponse(const SetInformationResponse& from)
      : SetInformationResponse(nullptr, from) {}
  SetInformationResponse(SetInformationResponse&& from) noexcept
    : SetInformationResponse() {
    *this = ::std::move(from);
  }

  inline SetInformationResponse& operator=(const SetInformationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInformationResponse& operator=(SetInformationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInformationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInformationResponse* internal_default_instance() {
    return reinterpret_cast<const SetInformationResponse*>(
               &_SetInformationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetInformationResponse& a, SetInformationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInformationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInformationResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInformationResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetInformationResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetInformationResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetInformationResponse& from) {
    SetInformationResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetInformationResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.camera_server.SetInformationResponse";
  }
  protected:
  explicit SetInformationResponse(::google::protobuf::Arena* arena);
  SetInformationResponse(::google::protobuf::Arena* arena, const SetInformationResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
  bool has_camera_server_result() const;
  void clear_camera_server_result() ;
  const ::mavsdk::rpc::camera_server::CameraServerResult& camera_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::CameraServerResult* release_camera_server_result();
  ::mavsdk::rpc::camera_server::CameraServerResult* mutable_camera_server_result();
  void set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* value);
  void unsafe_arena_set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* value);
  ::mavsdk::rpc::camera_server::CameraServerResult* unsafe_arena_release_camera_server_result();

  private:
  const ::mavsdk::rpc::camera_server::CameraServerResult& _internal_camera_server_result() const;
  ::mavsdk::rpc::camera_server::CameraServerResult* _internal_mutable_camera_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SetInformationResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};// -------------------------------------------------------------------

class SetInformationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SetInformationRequest) */ {
 public:
  inline SetInformationRequest() : SetInformationRequest(nullptr) {}
  ~SetInformationRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetInformationRequest(::google::protobuf::internal::ConstantInitialized);

  inline SetInformationRequest(const SetInformationRequest& from)
      : SetInformationRequest(nullptr, from) {}
  SetInformationRequest(SetInformationRequest&& from) noexcept
    : SetInformationRequest() {
    *this = ::std::move(from);
  }

  inline SetInformationRequest& operator=(const SetInformationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInformationRequest& operator=(SetInformationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInformationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInformationRequest* internal_default_instance() {
    return reinterpret_cast<const SetInformationRequest*>(
               &_SetInformationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetInformationRequest& a, SetInformationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInformationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInformationRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInformationRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetInformationRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetInformationRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetInformationRequest& from) {
    SetInformationRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetInformationRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.camera_server.SetInformationRequest";
  }
  protected:
  explicit SetInformationRequest(::google::protobuf::Arena* arena);
  SetInformationRequest(::google::protobuf::Arena* arena, const SetInformationRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInformationFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.Information information = 1;
  bool has_information() const;
  void clear_information() ;
  const ::mavsdk::rpc::camera_server::Information& information() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::Information* release_information();
  ::mavsdk::rpc::camera_server::Information* mutable_information();
  void set_allocated_information(::mavsdk::rpc::camera_server::Information* value);
  void unsafe_arena_set_allocated_information(::mavsdk::rpc::camera_server::Information* value);
  ::mavsdk::rpc::camera_server::Information* unsafe_arena_release_information();

  private:
  const ::mavsdk::rpc::camera_server::Information& _internal_information() const;
  ::mavsdk::rpc::camera_server::Information* _internal_mutable_information();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SetInformationRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::camera_server::Information* information_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};// -------------------------------------------------------------------

class SetInProgressResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.SetInProgressResponse) */ {
 public:
  inline SetInProgressResponse() : SetInProgressResponse(nullptr) {}
  ~SetInProgressResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SetInProgressResponse(::google::protobuf::internal::ConstantInitialized);

  inline SetInProgressResponse(const SetInProgressResponse& from)
      : SetInProgressResponse(nullptr, from) {}
  SetInProgressResponse(SetInProgressResponse&& from) noexcept
    : SetInProgressResponse() {
    *this = ::std::move(from);
  }

  inline SetInProgressResponse& operator=(const SetInProgressResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetInProgressResponse& operator=(SetInProgressResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetInProgressResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetInProgressResponse* internal_default_instance() {
    return reinterpret_cast<const SetInProgressResponse*>(
               &_SetInProgressResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetInProgressResponse& a, SetInProgressResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetInProgressResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetInProgressResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetInProgressResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetInProgressResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SetInProgressResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SetInProgressResponse& from) {
    SetInProgressResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(SetInProgressResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.camera_server.SetInProgressResponse";
  }
  protected:
  explicit SetInProgressResponse(::google::protobuf::Arena* arena);
  SetInProgressResponse(::google::protobuf::Arena* arena, const SetInProgressResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
  bool has_camera_server_result() const;
  void clear_camera_server_result() ;
  const ::mavsdk::rpc::camera_server::CameraServerResult& camera_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::CameraServerResult* release_camera_server_result();
  ::mavsdk::rpc::camera_server::CameraServerResult* mutable_camera_server_result();
  void set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* value);
  void unsafe_arena_set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* value);
  ::mavsdk::rpc::camera_server::CameraServerResult* unsafe_arena_release_camera_server_result();

  private:
  const ::mavsdk::rpc::camera_server::CameraServerResult& _internal_camera_server_result() const;
  ::mavsdk::rpc::camera_server::CameraServerResult* _internal_mutable_camera_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.SetInProgressResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};// -------------------------------------------------------------------

class RespondTakePhotoResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.RespondTakePhotoResponse) */ {
 public:
  inline RespondTakePhotoResponse() : RespondTakePhotoResponse(nullptr) {}
  ~RespondTakePhotoResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RespondTakePhotoResponse(::google::protobuf::internal::ConstantInitialized);

  inline RespondTakePhotoResponse(const RespondTakePhotoResponse& from)
      : RespondTakePhotoResponse(nullptr, from) {}
  RespondTakePhotoResponse(RespondTakePhotoResponse&& from) noexcept
    : RespondTakePhotoResponse() {
    *this = ::std::move(from);
  }

  inline RespondTakePhotoResponse& operator=(const RespondTakePhotoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondTakePhotoResponse& operator=(RespondTakePhotoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespondTakePhotoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespondTakePhotoResponse* internal_default_instance() {
    return reinterpret_cast<const RespondTakePhotoResponse*>(
               &_RespondTakePhotoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RespondTakePhotoResponse& a, RespondTakePhotoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondTakePhotoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondTakePhotoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespondTakePhotoResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespondTakePhotoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RespondTakePhotoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RespondTakePhotoResponse& from) {
    RespondTakePhotoResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RespondTakePhotoResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.camera_server.RespondTakePhotoResponse";
  }
  protected:
  explicit RespondTakePhotoResponse(::google::protobuf::Arena* arena);
  RespondTakePhotoResponse(::google::protobuf::Arena* arena, const RespondTakePhotoResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraServerResultFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
  bool has_camera_server_result() const;
  void clear_camera_server_result() ;
  const ::mavsdk::rpc::camera_server::CameraServerResult& camera_server_result() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::CameraServerResult* release_camera_server_result();
  ::mavsdk::rpc::camera_server::CameraServerResult* mutable_camera_server_result();
  void set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* value);
  void unsafe_arena_set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* value);
  ::mavsdk::rpc::camera_server::CameraServerResult* unsafe_arena_release_camera_server_result();

  private:
  const ::mavsdk::rpc::camera_server::CameraServerResult& _internal_camera_server_result() const;
  ::mavsdk::rpc::camera_server::CameraServerResult* _internal_mutable_camera_server_result();

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.RespondTakePhotoResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::camera_server::CameraServerResult* camera_server_result_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};// -------------------------------------------------------------------

class CaptureInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.CaptureInfo) */ {
 public:
  inline CaptureInfo() : CaptureInfo(nullptr) {}
  ~CaptureInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CaptureInfo(::google::protobuf::internal::ConstantInitialized);

  inline CaptureInfo(const CaptureInfo& from)
      : CaptureInfo(nullptr, from) {}
  CaptureInfo(CaptureInfo&& from) noexcept
    : CaptureInfo() {
    *this = ::std::move(from);
  }

  inline CaptureInfo& operator=(const CaptureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CaptureInfo& operator=(CaptureInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CaptureInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CaptureInfo* internal_default_instance() {
    return reinterpret_cast<const CaptureInfo*>(
               &_CaptureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CaptureInfo& a, CaptureInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CaptureInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CaptureInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CaptureInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CaptureInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CaptureInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CaptureInfo& from) {
    CaptureInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CaptureInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.camera_server.CaptureInfo";
  }
  protected:
  explicit CaptureInfo(::google::protobuf::Arena* arena);
  CaptureInfo(::google::protobuf::Arena* arena, const CaptureInfo& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileUrlFieldNumber = 6,
    kPositionFieldNumber = 1,
    kAttitudeQuaternionFieldNumber = 2,
    kTimeUtcUsFieldNumber = 3,
    kIsSuccessFieldNumber = 4,
    kIndexFieldNumber = 5,
  };
  // string file_url = 6;
  void clear_file_url() ;
  const std::string& file_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_url(Arg_&& arg, Args_... args);
  std::string* mutable_file_url();
  PROTOBUF_NODISCARD std::string* release_file_url();
  void set_allocated_file_url(std::string* value);

  private:
  const std::string& _internal_file_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_url(
      const std::string& value);
  std::string* _internal_mutable_file_url();

  public:
  // .mavsdk.rpc.camera_server.Position position = 1;
  bool has_position() const;
  void clear_position() ;
  const ::mavsdk::rpc::camera_server::Position& position() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::Position* release_position();
  ::mavsdk::rpc::camera_server::Position* mutable_position();
  void set_allocated_position(::mavsdk::rpc::camera_server::Position* value);
  void unsafe_arena_set_allocated_position(::mavsdk::rpc::camera_server::Position* value);
  ::mavsdk::rpc::camera_server::Position* unsafe_arena_release_position();

  private:
  const ::mavsdk::rpc::camera_server::Position& _internal_position() const;
  ::mavsdk::rpc::camera_server::Position* _internal_mutable_position();

  public:
  // .mavsdk.rpc.camera_server.Quaternion attitude_quaternion = 2;
  bool has_attitude_quaternion() const;
  void clear_attitude_quaternion() ;
  const ::mavsdk::rpc::camera_server::Quaternion& attitude_quaternion() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::Quaternion* release_attitude_quaternion();
  ::mavsdk::rpc::camera_server::Quaternion* mutable_attitude_quaternion();
  void set_allocated_attitude_quaternion(::mavsdk::rpc::camera_server::Quaternion* value);
  void unsafe_arena_set_allocated_attitude_quaternion(::mavsdk::rpc::camera_server::Quaternion* value);
  ::mavsdk::rpc::camera_server::Quaternion* unsafe_arena_release_attitude_quaternion();

  private:
  const ::mavsdk::rpc::camera_server::Quaternion& _internal_attitude_quaternion() const;
  ::mavsdk::rpc::camera_server::Quaternion* _internal_mutable_attitude_quaternion();

  public:
  // uint64 time_utc_us = 3;
  void clear_time_utc_us() ;
  ::uint64_t time_utc_us() const;
  void set_time_utc_us(::uint64_t value);

  private:
  ::uint64_t _internal_time_utc_us() const;
  void _internal_set_time_utc_us(::uint64_t value);

  public:
  // bool is_success = 4;
  void clear_is_success() ;
  bool is_success() const;
  void set_is_success(bool value);

  private:
  bool _internal_is_success() const;
  void _internal_set_is_success(bool value);

  public:
  // int32 index = 5;
  void clear_index() ;
  ::int32_t index() const;
  void set_index(::int32_t value);

  private:
  ::int32_t _internal_index() const;
  void _internal_set_index(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.CaptureInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 2,
      53, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr file_url_;
    ::mavsdk::rpc::camera_server::Position* position_;
    ::mavsdk::rpc::camera_server::Quaternion* attitude_quaternion_;
    ::uint64_t time_utc_us_;
    bool is_success_;
    ::int32_t index_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};// -------------------------------------------------------------------

class RespondTakePhotoRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.camera_server.RespondTakePhotoRequest) */ {
 public:
  inline RespondTakePhotoRequest() : RespondTakePhotoRequest(nullptr) {}
  ~RespondTakePhotoRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR RespondTakePhotoRequest(::google::protobuf::internal::ConstantInitialized);

  inline RespondTakePhotoRequest(const RespondTakePhotoRequest& from)
      : RespondTakePhotoRequest(nullptr, from) {}
  RespondTakePhotoRequest(RespondTakePhotoRequest&& from) noexcept
    : RespondTakePhotoRequest() {
    *this = ::std::move(from);
  }

  inline RespondTakePhotoRequest& operator=(const RespondTakePhotoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RespondTakePhotoRequest& operator=(RespondTakePhotoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RespondTakePhotoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RespondTakePhotoRequest* internal_default_instance() {
    return reinterpret_cast<const RespondTakePhotoRequest*>(
               &_RespondTakePhotoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RespondTakePhotoRequest& a, RespondTakePhotoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RespondTakePhotoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RespondTakePhotoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RespondTakePhotoRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RespondTakePhotoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const RespondTakePhotoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const RespondTakePhotoRequest& from) {
    RespondTakePhotoRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(RespondTakePhotoRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "mavsdk.rpc.camera_server.RespondTakePhotoRequest";
  }
  protected:
  explicit RespondTakePhotoRequest(::google::protobuf::Arena* arena);
  RespondTakePhotoRequest(::google::protobuf::Arena* arena, const RespondTakePhotoRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCaptureInfoFieldNumber = 2,
    kTakePhotoFeedbackFieldNumber = 1,
  };
  // .mavsdk.rpc.camera_server.CaptureInfo capture_info = 2;
  bool has_capture_info() const;
  void clear_capture_info() ;
  const ::mavsdk::rpc::camera_server::CaptureInfo& capture_info() const;
  PROTOBUF_NODISCARD ::mavsdk::rpc::camera_server::CaptureInfo* release_capture_info();
  ::mavsdk::rpc::camera_server::CaptureInfo* mutable_capture_info();
  void set_allocated_capture_info(::mavsdk::rpc::camera_server::CaptureInfo* value);
  void unsafe_arena_set_allocated_capture_info(::mavsdk::rpc::camera_server::CaptureInfo* value);
  ::mavsdk::rpc::camera_server::CaptureInfo* unsafe_arena_release_capture_info();

  private:
  const ::mavsdk::rpc::camera_server::CaptureInfo& _internal_capture_info() const;
  ::mavsdk::rpc::camera_server::CaptureInfo* _internal_mutable_capture_info();

  public:
  // .mavsdk.rpc.camera_server.TakePhotoFeedback take_photo_feedback = 1;
  void clear_take_photo_feedback() ;
  ::mavsdk::rpc::camera_server::TakePhotoFeedback take_photo_feedback() const;
  void set_take_photo_feedback(::mavsdk::rpc::camera_server::TakePhotoFeedback value);

  private:
  ::mavsdk::rpc::camera_server::TakePhotoFeedback _internal_take_photo_feedback() const;
  void _internal_set_take_photo_feedback(::mavsdk::rpc::camera_server::TakePhotoFeedback value);

  public:
  // @@protoc_insertion_point(class_scope:mavsdk.rpc.camera_server.RespondTakePhotoRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::mavsdk::rpc::camera_server::CaptureInfo* capture_info_;
    int take_photo_feedback_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_camera_5fserver_2fcamera_5fserver_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SetInformationRequest

// .mavsdk.rpc.camera_server.Information information = 1;
inline bool SetInformationRequest::has_information() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.information_ != nullptr);
  return value;
}
inline void SetInformationRequest::clear_information() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.information_ != nullptr) _impl_.information_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::camera_server::Information& SetInformationRequest::_internal_information() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::camera_server::Information* p = _impl_.information_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::Information&>(::mavsdk::rpc::camera_server::_Information_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::Information& SetInformationRequest::information() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.SetInformationRequest.information)
  return _internal_information();
}
inline void SetInformationRequest::unsafe_arena_set_allocated_information(::mavsdk::rpc::camera_server::Information* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.information_);
  }
  _impl_.information_ = reinterpret_cast<::mavsdk::rpc::camera_server::Information*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.SetInformationRequest.information)
}
inline ::mavsdk::rpc::camera_server::Information* SetInformationRequest::release_information() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::camera_server::Information* released = _impl_.information_;
  _impl_.information_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::camera_server::Information* SetInformationRequest::unsafe_arena_release_information() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.SetInformationRequest.information)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::camera_server::Information* temp = _impl_.information_;
  _impl_.information_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::Information* SetInformationRequest::_internal_mutable_information() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.information_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::Information>(GetArena());
    _impl_.information_ = reinterpret_cast<::mavsdk::rpc::camera_server::Information*>(p);
  }
  return _impl_.information_;
}
inline ::mavsdk::rpc::camera_server::Information* SetInformationRequest::mutable_information() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::camera_server::Information* _msg = _internal_mutable_information();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.SetInformationRequest.information)
  return _msg;
}
inline void SetInformationRequest::set_allocated_information(::mavsdk::rpc::camera_server::Information* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::camera_server::Information*>(_impl_.information_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::camera_server::Information*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.information_ = reinterpret_cast<::mavsdk::rpc::camera_server::Information*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.SetInformationRequest.information)
}

// -------------------------------------------------------------------

// SetInformationResponse

// .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
inline bool SetInformationResponse::has_camera_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.camera_server_result_ != nullptr);
  return value;
}
inline void SetInformationResponse::clear_camera_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.camera_server_result_ != nullptr) _impl_.camera_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& SetInformationResponse::_internal_camera_server_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::camera_server::CameraServerResult* p = _impl_.camera_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::CameraServerResult&>(::mavsdk::rpc::camera_server::_CameraServerResult_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& SetInformationResponse::camera_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.SetInformationResponse.camera_server_result)
  return _internal_camera_server_result();
}
inline void SetInformationResponse::unsafe_arena_set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.camera_server_result_);
  }
  _impl_.camera_server_result_ = reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.SetInformationResponse.camera_server_result)
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* SetInformationResponse::release_camera_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::camera_server::CameraServerResult* released = _impl_.camera_server_result_;
  _impl_.camera_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* SetInformationResponse::unsafe_arena_release_camera_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.SetInformationResponse.camera_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::camera_server::CameraServerResult* temp = _impl_.camera_server_result_;
  _impl_.camera_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* SetInformationResponse::_internal_mutable_camera_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.camera_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::CameraServerResult>(GetArena());
    _impl_.camera_server_result_ = reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(p);
  }
  return _impl_.camera_server_result_;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* SetInformationResponse::mutable_camera_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::camera_server::CameraServerResult* _msg = _internal_mutable_camera_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.SetInformationResponse.camera_server_result)
  return _msg;
}
inline void SetInformationResponse::set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(_impl_.camera_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.camera_server_result_ = reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.SetInformationResponse.camera_server_result)
}

// -------------------------------------------------------------------

// SetInProgressRequest

// bool in_progress = 1;
inline void SetInProgressRequest::clear_in_progress() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.in_progress_ = false;
}
inline bool SetInProgressRequest::in_progress() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.SetInProgressRequest.in_progress)
  return _internal_in_progress();
}
inline void SetInProgressRequest::set_in_progress(bool value) {
  _internal_set_in_progress(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.SetInProgressRequest.in_progress)
}
inline bool SetInProgressRequest::_internal_in_progress() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.in_progress_;
}
inline void SetInProgressRequest::_internal_set_in_progress(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.in_progress_ = value;
}

// -------------------------------------------------------------------

// SetInProgressResponse

// .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
inline bool SetInProgressResponse::has_camera_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.camera_server_result_ != nullptr);
  return value;
}
inline void SetInProgressResponse::clear_camera_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.camera_server_result_ != nullptr) _impl_.camera_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& SetInProgressResponse::_internal_camera_server_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::camera_server::CameraServerResult* p = _impl_.camera_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::CameraServerResult&>(::mavsdk::rpc::camera_server::_CameraServerResult_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& SetInProgressResponse::camera_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.SetInProgressResponse.camera_server_result)
  return _internal_camera_server_result();
}
inline void SetInProgressResponse::unsafe_arena_set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.camera_server_result_);
  }
  _impl_.camera_server_result_ = reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.SetInProgressResponse.camera_server_result)
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* SetInProgressResponse::release_camera_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::camera_server::CameraServerResult* released = _impl_.camera_server_result_;
  _impl_.camera_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* SetInProgressResponse::unsafe_arena_release_camera_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.SetInProgressResponse.camera_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::camera_server::CameraServerResult* temp = _impl_.camera_server_result_;
  _impl_.camera_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* SetInProgressResponse::_internal_mutable_camera_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.camera_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::CameraServerResult>(GetArena());
    _impl_.camera_server_result_ = reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(p);
  }
  return _impl_.camera_server_result_;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* SetInProgressResponse::mutable_camera_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::camera_server::CameraServerResult* _msg = _internal_mutable_camera_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.SetInProgressResponse.camera_server_result)
  return _msg;
}
inline void SetInProgressResponse::set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(_impl_.camera_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.camera_server_result_ = reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.SetInProgressResponse.camera_server_result)
}

// -------------------------------------------------------------------

// SubscribeTakePhotoRequest

// -------------------------------------------------------------------

// TakePhotoResponse

// int32 index = 1;
inline void TakePhotoResponse::clear_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.index_ = 0;
}
inline ::int32_t TakePhotoResponse::index() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.TakePhotoResponse.index)
  return _internal_index();
}
inline void TakePhotoResponse::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.TakePhotoResponse.index)
}
inline ::int32_t TakePhotoResponse::_internal_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_;
}
inline void TakePhotoResponse::_internal_set_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_ = value;
}

// -------------------------------------------------------------------

// RespondTakePhotoRequest

// .mavsdk.rpc.camera_server.TakePhotoFeedback take_photo_feedback = 1;
inline void RespondTakePhotoRequest::clear_take_photo_feedback() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.take_photo_feedback_ = 0;
}
inline ::mavsdk::rpc::camera_server::TakePhotoFeedback RespondTakePhotoRequest::take_photo_feedback() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.RespondTakePhotoRequest.take_photo_feedback)
  return _internal_take_photo_feedback();
}
inline void RespondTakePhotoRequest::set_take_photo_feedback(::mavsdk::rpc::camera_server::TakePhotoFeedback value) {
  _internal_set_take_photo_feedback(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.RespondTakePhotoRequest.take_photo_feedback)
}
inline ::mavsdk::rpc::camera_server::TakePhotoFeedback RespondTakePhotoRequest::_internal_take_photo_feedback() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mavsdk::rpc::camera_server::TakePhotoFeedback>(_impl_.take_photo_feedback_);
}
inline void RespondTakePhotoRequest::_internal_set_take_photo_feedback(::mavsdk::rpc::camera_server::TakePhotoFeedback value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.take_photo_feedback_ = value;
}

// .mavsdk.rpc.camera_server.CaptureInfo capture_info = 2;
inline bool RespondTakePhotoRequest::has_capture_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.capture_info_ != nullptr);
  return value;
}
inline void RespondTakePhotoRequest::clear_capture_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.capture_info_ != nullptr) _impl_.capture_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::camera_server::CaptureInfo& RespondTakePhotoRequest::_internal_capture_info() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::camera_server::CaptureInfo* p = _impl_.capture_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::CaptureInfo&>(::mavsdk::rpc::camera_server::_CaptureInfo_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::CaptureInfo& RespondTakePhotoRequest::capture_info() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.RespondTakePhotoRequest.capture_info)
  return _internal_capture_info();
}
inline void RespondTakePhotoRequest::unsafe_arena_set_allocated_capture_info(::mavsdk::rpc::camera_server::CaptureInfo* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.capture_info_);
  }
  _impl_.capture_info_ = reinterpret_cast<::mavsdk::rpc::camera_server::CaptureInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.RespondTakePhotoRequest.capture_info)
}
inline ::mavsdk::rpc::camera_server::CaptureInfo* RespondTakePhotoRequest::release_capture_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::camera_server::CaptureInfo* released = _impl_.capture_info_;
  _impl_.capture_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::camera_server::CaptureInfo* RespondTakePhotoRequest::unsafe_arena_release_capture_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.RespondTakePhotoRequest.capture_info)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::camera_server::CaptureInfo* temp = _impl_.capture_info_;
  _impl_.capture_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::CaptureInfo* RespondTakePhotoRequest::_internal_mutable_capture_info() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.capture_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::CaptureInfo>(GetArena());
    _impl_.capture_info_ = reinterpret_cast<::mavsdk::rpc::camera_server::CaptureInfo*>(p);
  }
  return _impl_.capture_info_;
}
inline ::mavsdk::rpc::camera_server::CaptureInfo* RespondTakePhotoRequest::mutable_capture_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::camera_server::CaptureInfo* _msg = _internal_mutable_capture_info();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.RespondTakePhotoRequest.capture_info)
  return _msg;
}
inline void RespondTakePhotoRequest::set_allocated_capture_info(::mavsdk::rpc::camera_server::CaptureInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::camera_server::CaptureInfo*>(_impl_.capture_info_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::camera_server::CaptureInfo*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.capture_info_ = reinterpret_cast<::mavsdk::rpc::camera_server::CaptureInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.RespondTakePhotoRequest.capture_info)
}

// -------------------------------------------------------------------

// RespondTakePhotoResponse

// .mavsdk.rpc.camera_server.CameraServerResult camera_server_result = 1;
inline bool RespondTakePhotoResponse::has_camera_server_result() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.camera_server_result_ != nullptr);
  return value;
}
inline void RespondTakePhotoResponse::clear_camera_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.camera_server_result_ != nullptr) _impl_.camera_server_result_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& RespondTakePhotoResponse::_internal_camera_server_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::camera_server::CameraServerResult* p = _impl_.camera_server_result_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::CameraServerResult&>(::mavsdk::rpc::camera_server::_CameraServerResult_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::CameraServerResult& RespondTakePhotoResponse::camera_server_result() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.RespondTakePhotoResponse.camera_server_result)
  return _internal_camera_server_result();
}
inline void RespondTakePhotoResponse::unsafe_arena_set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.camera_server_result_);
  }
  _impl_.camera_server_result_ = reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.RespondTakePhotoResponse.camera_server_result)
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondTakePhotoResponse::release_camera_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::camera_server::CameraServerResult* released = _impl_.camera_server_result_;
  _impl_.camera_server_result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondTakePhotoResponse::unsafe_arena_release_camera_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.RespondTakePhotoResponse.camera_server_result)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::camera_server::CameraServerResult* temp = _impl_.camera_server_result_;
  _impl_.camera_server_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondTakePhotoResponse::_internal_mutable_camera_server_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.camera_server_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::CameraServerResult>(GetArena());
    _impl_.camera_server_result_ = reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(p);
  }
  return _impl_.camera_server_result_;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult* RespondTakePhotoResponse::mutable_camera_server_result() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::camera_server::CameraServerResult* _msg = _internal_mutable_camera_server_result();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.RespondTakePhotoResponse.camera_server_result)
  return _msg;
}
inline void RespondTakePhotoResponse::set_allocated_camera_server_result(::mavsdk::rpc::camera_server::CameraServerResult* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(_impl_.camera_server_result_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.camera_server_result_ = reinterpret_cast<::mavsdk::rpc::camera_server::CameraServerResult*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.RespondTakePhotoResponse.camera_server_result)
}

// -------------------------------------------------------------------

// Information

// string vendor_name = 1;
inline void Information::clear_vendor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vendor_name_.ClearToEmpty();
}
inline const std::string& Information::vendor_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.vendor_name)
  return _internal_vendor_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Information::set_vendor_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vendor_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.vendor_name)
}
inline std::string* Information::mutable_vendor_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_vendor_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.Information.vendor_name)
  return _s;
}
inline const std::string& Information::_internal_vendor_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vendor_name_.Get();
}
inline void Information::_internal_set_vendor_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vendor_name_.Set(value, GetArena());
}
inline std::string* Information::_internal_mutable_vendor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.vendor_name_.Mutable( GetArena());
}
inline std::string* Information::release_vendor_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.Information.vendor_name)
  return _impl_.vendor_name_.Release();
}
inline void Information::set_allocated_vendor_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vendor_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.vendor_name_.IsDefault()) {
          _impl_.vendor_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.Information.vendor_name)
}

// string model_name = 2;
inline void Information::clear_model_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.model_name_.ClearToEmpty();
}
inline const std::string& Information::model_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.model_name)
  return _internal_model_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Information::set_model_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.model_name)
}
inline std::string* Information::mutable_model_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.Information.model_name)
  return _s;
}
inline const std::string& Information::_internal_model_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.model_name_.Get();
}
inline void Information::_internal_set_model_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.model_name_.Set(value, GetArena());
}
inline std::string* Information::_internal_mutable_model_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.model_name_.Mutable( GetArena());
}
inline std::string* Information::release_model_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.Information.model_name)
  return _impl_.model_name_.Release();
}
inline void Information::set_allocated_model_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.model_name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_name_.IsDefault()) {
          _impl_.model_name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.Information.model_name)
}

// string firmware_version = 3;
inline void Information::clear_firmware_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.firmware_version_.ClearToEmpty();
}
inline const std::string& Information::firmware_version() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.firmware_version)
  return _internal_firmware_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Information::set_firmware_version(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.firmware_version_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.firmware_version)
}
inline std::string* Information::mutable_firmware_version() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_firmware_version();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.Information.firmware_version)
  return _s;
}
inline const std::string& Information::_internal_firmware_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.firmware_version_.Get();
}
inline void Information::_internal_set_firmware_version(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.firmware_version_.Set(value, GetArena());
}
inline std::string* Information::_internal_mutable_firmware_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.firmware_version_.Mutable( GetArena());
}
inline std::string* Information::release_firmware_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.Information.firmware_version)
  return _impl_.firmware_version_.Release();
}
inline void Information::set_allocated_firmware_version(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.firmware_version_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.firmware_version_.IsDefault()) {
          _impl_.firmware_version_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.Information.firmware_version)
}

// float focal_length_mm = 4;
inline void Information::clear_focal_length_mm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.focal_length_mm_ = 0;
}
inline float Information::focal_length_mm() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.focal_length_mm)
  return _internal_focal_length_mm();
}
inline void Information::set_focal_length_mm(float value) {
  _internal_set_focal_length_mm(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.focal_length_mm)
}
inline float Information::_internal_focal_length_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.focal_length_mm_;
}
inline void Information::_internal_set_focal_length_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.focal_length_mm_ = value;
}

// float horizontal_sensor_size_mm = 5;
inline void Information::clear_horizontal_sensor_size_mm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.horizontal_sensor_size_mm_ = 0;
}
inline float Information::horizontal_sensor_size_mm() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.horizontal_sensor_size_mm)
  return _internal_horizontal_sensor_size_mm();
}
inline void Information::set_horizontal_sensor_size_mm(float value) {
  _internal_set_horizontal_sensor_size_mm(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.horizontal_sensor_size_mm)
}
inline float Information::_internal_horizontal_sensor_size_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.horizontal_sensor_size_mm_;
}
inline void Information::_internal_set_horizontal_sensor_size_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.horizontal_sensor_size_mm_ = value;
}

// float vertical_sensor_size_mm = 6;
inline void Information::clear_vertical_sensor_size_mm() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vertical_sensor_size_mm_ = 0;
}
inline float Information::vertical_sensor_size_mm() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.vertical_sensor_size_mm)
  return _internal_vertical_sensor_size_mm();
}
inline void Information::set_vertical_sensor_size_mm(float value) {
  _internal_set_vertical_sensor_size_mm(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.vertical_sensor_size_mm)
}
inline float Information::_internal_vertical_sensor_size_mm() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vertical_sensor_size_mm_;
}
inline void Information::_internal_set_vertical_sensor_size_mm(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vertical_sensor_size_mm_ = value;
}

// uint32 horizontal_resolution_px = 7;
inline void Information::clear_horizontal_resolution_px() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.horizontal_resolution_px_ = 0u;
}
inline ::uint32_t Information::horizontal_resolution_px() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.horizontal_resolution_px)
  return _internal_horizontal_resolution_px();
}
inline void Information::set_horizontal_resolution_px(::uint32_t value) {
  _internal_set_horizontal_resolution_px(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.horizontal_resolution_px)
}
inline ::uint32_t Information::_internal_horizontal_resolution_px() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.horizontal_resolution_px_;
}
inline void Information::_internal_set_horizontal_resolution_px(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.horizontal_resolution_px_ = value;
}

// uint32 vertical_resolution_px = 8;
inline void Information::clear_vertical_resolution_px() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.vertical_resolution_px_ = 0u;
}
inline ::uint32_t Information::vertical_resolution_px() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.vertical_resolution_px)
  return _internal_vertical_resolution_px();
}
inline void Information::set_vertical_resolution_px(::uint32_t value) {
  _internal_set_vertical_resolution_px(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.vertical_resolution_px)
}
inline ::uint32_t Information::_internal_vertical_resolution_px() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.vertical_resolution_px_;
}
inline void Information::_internal_set_vertical_resolution_px(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.vertical_resolution_px_ = value;
}

// uint32 lens_id = 9;
inline void Information::clear_lens_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.lens_id_ = 0u;
}
inline ::uint32_t Information::lens_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.lens_id)
  return _internal_lens_id();
}
inline void Information::set_lens_id(::uint32_t value) {
  _internal_set_lens_id(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.lens_id)
}
inline ::uint32_t Information::_internal_lens_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.lens_id_;
}
inline void Information::_internal_set_lens_id(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.lens_id_ = value;
}

// uint32 definition_file_version = 10;
inline void Information::clear_definition_file_version() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.definition_file_version_ = 0u;
}
inline ::uint32_t Information::definition_file_version() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.definition_file_version)
  return _internal_definition_file_version();
}
inline void Information::set_definition_file_version(::uint32_t value) {
  _internal_set_definition_file_version(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.definition_file_version)
}
inline ::uint32_t Information::_internal_definition_file_version() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.definition_file_version_;
}
inline void Information::_internal_set_definition_file_version(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.definition_file_version_ = value;
}

// string definition_file_uri = 11;
inline void Information::clear_definition_file_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.definition_file_uri_.ClearToEmpty();
}
inline const std::string& Information::definition_file_uri() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Information.definition_file_uri)
  return _internal_definition_file_uri();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Information::set_definition_file_uri(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.definition_file_uri_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Information.definition_file_uri)
}
inline std::string* Information::mutable_definition_file_uri() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_definition_file_uri();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.Information.definition_file_uri)
  return _s;
}
inline const std::string& Information::_internal_definition_file_uri() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.definition_file_uri_.Get();
}
inline void Information::_internal_set_definition_file_uri(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.definition_file_uri_.Set(value, GetArena());
}
inline std::string* Information::_internal_mutable_definition_file_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.definition_file_uri_.Mutable( GetArena());
}
inline std::string* Information::release_definition_file_uri() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.Information.definition_file_uri)
  return _impl_.definition_file_uri_.Release();
}
inline void Information::set_allocated_definition_file_uri(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.definition_file_uri_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.definition_file_uri_.IsDefault()) {
          _impl_.definition_file_uri_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.Information.definition_file_uri)
}

// -------------------------------------------------------------------

// Position

// double latitude_deg = 1;
inline void Position::clear_latitude_deg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.latitude_deg_ = 0;
}
inline double Position::latitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Position.latitude_deg)
  return _internal_latitude_deg();
}
inline void Position::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Position.latitude_deg)
}
inline double Position::_internal_latitude_deg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.latitude_deg_;
}
inline void Position::_internal_set_latitude_deg(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.latitude_deg_ = value;
}

// double longitude_deg = 2;
inline void Position::clear_longitude_deg() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.longitude_deg_ = 0;
}
inline double Position::longitude_deg() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Position.longitude_deg)
  return _internal_longitude_deg();
}
inline void Position::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Position.longitude_deg)
}
inline double Position::_internal_longitude_deg() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.longitude_deg_;
}
inline void Position::_internal_set_longitude_deg(double value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.longitude_deg_ = value;
}

// float absolute_altitude_m = 3;
inline void Position::clear_absolute_altitude_m() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.absolute_altitude_m_ = 0;
}
inline float Position::absolute_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Position.absolute_altitude_m)
  return _internal_absolute_altitude_m();
}
inline void Position::set_absolute_altitude_m(float value) {
  _internal_set_absolute_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Position.absolute_altitude_m)
}
inline float Position::_internal_absolute_altitude_m() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.absolute_altitude_m_;
}
inline void Position::_internal_set_absolute_altitude_m(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.absolute_altitude_m_ = value;
}

// float relative_altitude_m = 4;
inline void Position::clear_relative_altitude_m() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.relative_altitude_m_ = 0;
}
inline float Position::relative_altitude_m() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Position.relative_altitude_m)
  return _internal_relative_altitude_m();
}
inline void Position::set_relative_altitude_m(float value) {
  _internal_set_relative_altitude_m(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Position.relative_altitude_m)
}
inline float Position::_internal_relative_altitude_m() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.relative_altitude_m_;
}
inline void Position::_internal_set_relative_altitude_m(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.relative_altitude_m_ = value;
}

// -------------------------------------------------------------------

// Quaternion

// float w = 1;
inline void Quaternion::clear_w() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.w_ = 0;
}
inline float Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Quaternion.w)
  return _internal_w();
}
inline void Quaternion::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Quaternion.w)
}
inline float Quaternion::_internal_w() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.w_;
}
inline void Quaternion::_internal_set_w(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.w_ = value;
}

// float x = 2;
inline void Quaternion::clear_x() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.x_ = 0;
}
inline float Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Quaternion.x)
  return _internal_x();
}
inline void Quaternion::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Quaternion.x)
}
inline float Quaternion::_internal_x() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.x_;
}
inline void Quaternion::_internal_set_x(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.x_ = value;
}

// float y = 3;
inline void Quaternion::clear_y() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.y_ = 0;
}
inline float Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Quaternion.y)
  return _internal_y();
}
inline void Quaternion::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Quaternion.y)
}
inline float Quaternion::_internal_y() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.y_;
}
inline void Quaternion::_internal_set_y(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.y_ = value;
}

// float z = 4;
inline void Quaternion::clear_z() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.z_ = 0;
}
inline float Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.Quaternion.z)
  return _internal_z();
}
inline void Quaternion::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.Quaternion.z)
}
inline float Quaternion::_internal_z() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.z_;
}
inline void Quaternion::_internal_set_z(float value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.z_ = value;
}

// -------------------------------------------------------------------

// CaptureInfo

// .mavsdk.rpc.camera_server.Position position = 1;
inline bool CaptureInfo::has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline void CaptureInfo::clear_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.position_ != nullptr) _impl_.position_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::mavsdk::rpc::camera_server::Position& CaptureInfo::_internal_position() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::camera_server::Position* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::Position&>(::mavsdk::rpc::camera_server::_Position_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::Position& CaptureInfo::position() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureInfo.position)
  return _internal_position();
}
inline void CaptureInfo::unsafe_arena_set_allocated_position(::mavsdk::rpc::camera_server::Position* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = reinterpret_cast<::mavsdk::rpc::camera_server::Position*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.CaptureInfo.position)
}
inline ::mavsdk::rpc::camera_server::Position* CaptureInfo::release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::camera_server::Position* released = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::camera_server::Position* CaptureInfo::unsafe_arena_release_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.CaptureInfo.position)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::mavsdk::rpc::camera_server::Position* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::Position* CaptureInfo::_internal_mutable_position() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::Position>(GetArena());
    _impl_.position_ = reinterpret_cast<::mavsdk::rpc::camera_server::Position*>(p);
  }
  return _impl_.position_;
}
inline ::mavsdk::rpc::camera_server::Position* CaptureInfo::mutable_position() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::camera_server::Position* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.CaptureInfo.position)
  return _msg;
}
inline void CaptureInfo::set_allocated_position(::mavsdk::rpc::camera_server::Position* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::camera_server::Position*>(_impl_.position_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::camera_server::Position*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.position_ = reinterpret_cast<::mavsdk::rpc::camera_server::Position*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.CaptureInfo.position)
}

// .mavsdk.rpc.camera_server.Quaternion attitude_quaternion = 2;
inline bool CaptureInfo::has_attitude_quaternion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.attitude_quaternion_ != nullptr);
  return value;
}
inline void CaptureInfo::clear_attitude_quaternion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (_impl_.attitude_quaternion_ != nullptr) _impl_.attitude_quaternion_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::mavsdk::rpc::camera_server::Quaternion& CaptureInfo::_internal_attitude_quaternion() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  const ::mavsdk::rpc::camera_server::Quaternion* p = _impl_.attitude_quaternion_;
  return p != nullptr ? *p : reinterpret_cast<const ::mavsdk::rpc::camera_server::Quaternion&>(::mavsdk::rpc::camera_server::_Quaternion_default_instance_);
}
inline const ::mavsdk::rpc::camera_server::Quaternion& CaptureInfo::attitude_quaternion() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureInfo.attitude_quaternion)
  return _internal_attitude_quaternion();
}
inline void CaptureInfo::unsafe_arena_set_allocated_attitude_quaternion(::mavsdk::rpc::camera_server::Quaternion* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.attitude_quaternion_);
  }
  _impl_.attitude_quaternion_ = reinterpret_cast<::mavsdk::rpc::camera_server::Quaternion*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:mavsdk.rpc.camera_server.CaptureInfo.attitude_quaternion)
}
inline ::mavsdk::rpc::camera_server::Quaternion* CaptureInfo::release_attitude_quaternion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::camera_server::Quaternion* released = _impl_.attitude_quaternion_;
  _impl_.attitude_quaternion_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArena() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArena() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::mavsdk::rpc::camera_server::Quaternion* CaptureInfo::unsafe_arena_release_attitude_quaternion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.CaptureInfo.attitude_quaternion)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::mavsdk::rpc::camera_server::Quaternion* temp = _impl_.attitude_quaternion_;
  _impl_.attitude_quaternion_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::camera_server::Quaternion* CaptureInfo::_internal_mutable_attitude_quaternion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.attitude_quaternion_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::camera_server::Quaternion>(GetArena());
    _impl_.attitude_quaternion_ = reinterpret_cast<::mavsdk::rpc::camera_server::Quaternion*>(p);
  }
  return _impl_.attitude_quaternion_;
}
inline ::mavsdk::rpc::camera_server::Quaternion* CaptureInfo::mutable_attitude_quaternion() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::mavsdk::rpc::camera_server::Quaternion* _msg = _internal_mutable_attitude_quaternion();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.CaptureInfo.attitude_quaternion)
  return _msg;
}
inline void CaptureInfo::set_allocated_attitude_quaternion(::mavsdk::rpc::camera_server::Quaternion* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::mavsdk::rpc::camera_server::Quaternion*>(_impl_.attitude_quaternion_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::mavsdk::rpc::camera_server::Quaternion*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.attitude_quaternion_ = reinterpret_cast<::mavsdk::rpc::camera_server::Quaternion*>(value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.CaptureInfo.attitude_quaternion)
}

// uint64 time_utc_us = 3;
inline void CaptureInfo::clear_time_utc_us() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.time_utc_us_ = ::uint64_t{0u};
}
inline ::uint64_t CaptureInfo::time_utc_us() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureInfo.time_utc_us)
  return _internal_time_utc_us();
}
inline void CaptureInfo::set_time_utc_us(::uint64_t value) {
  _internal_set_time_utc_us(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureInfo.time_utc_us)
}
inline ::uint64_t CaptureInfo::_internal_time_utc_us() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.time_utc_us_;
}
inline void CaptureInfo::_internal_set_time_utc_us(::uint64_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.time_utc_us_ = value;
}

// bool is_success = 4;
inline void CaptureInfo::clear_is_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.is_success_ = false;
}
inline bool CaptureInfo::is_success() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureInfo.is_success)
  return _internal_is_success();
}
inline void CaptureInfo::set_is_success(bool value) {
  _internal_set_is_success(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureInfo.is_success)
}
inline bool CaptureInfo::_internal_is_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.is_success_;
}
inline void CaptureInfo::_internal_set_is_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.is_success_ = value;
}

// int32 index = 5;
inline void CaptureInfo::clear_index() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.index_ = 0;
}
inline ::int32_t CaptureInfo::index() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureInfo.index)
  return _internal_index();
}
inline void CaptureInfo::set_index(::int32_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureInfo.index)
}
inline ::int32_t CaptureInfo::_internal_index() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.index_;
}
inline void CaptureInfo::_internal_set_index(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.index_ = value;
}

// string file_url = 6;
inline void CaptureInfo::clear_file_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_url_.ClearToEmpty();
}
inline const std::string& CaptureInfo::file_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CaptureInfo.file_url)
  return _internal_file_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CaptureInfo::set_file_url(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CaptureInfo.file_url)
}
inline std::string* CaptureInfo::mutable_file_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_url();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.CaptureInfo.file_url)
  return _s;
}
inline const std::string& CaptureInfo::_internal_file_url() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_url_.Get();
}
inline void CaptureInfo::_internal_set_file_url(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.file_url_.Set(value, GetArena());
}
inline std::string* CaptureInfo::_internal_mutable_file_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.file_url_.Mutable( GetArena());
}
inline std::string* CaptureInfo::release_file_url() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.CaptureInfo.file_url)
  return _impl_.file_url_.Release();
}
inline void CaptureInfo::set_allocated_file_url(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_url_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_url_.IsDefault()) {
          _impl_.file_url_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.CaptureInfo.file_url)
}

// -------------------------------------------------------------------

// CameraServerResult

// .mavsdk.rpc.camera_server.CameraServerResult.Result result = 1;
inline void CameraServerResult::clear_result() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_ = 0;
}
inline ::mavsdk::rpc::camera_server::CameraServerResult_Result CameraServerResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CameraServerResult.result)
  return _internal_result();
}
inline void CameraServerResult::set_result(::mavsdk::rpc::camera_server::CameraServerResult_Result value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CameraServerResult.result)
}
inline ::mavsdk::rpc::camera_server::CameraServerResult_Result CameraServerResult::_internal_result() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::mavsdk::rpc::camera_server::CameraServerResult_Result>(_impl_.result_);
}
inline void CameraServerResult::_internal_set_result(::mavsdk::rpc::camera_server::CameraServerResult_Result value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_ = value;
}

// string result_str = 2;
inline void CameraServerResult::clear_result_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_str_.ClearToEmpty();
}
inline const std::string& CameraServerResult::result_str() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.camera_server.CameraServerResult.result_str)
  return _internal_result_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CameraServerResult::set_result_str(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_str_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:mavsdk.rpc.camera_server.CameraServerResult.result_str)
}
inline std::string* CameraServerResult::mutable_result_str() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_result_str();
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.camera_server.CameraServerResult.result_str)
  return _s;
}
inline const std::string& CameraServerResult::_internal_result_str() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.result_str_.Get();
}
inline void CameraServerResult::_internal_set_result_str(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.result_str_.Set(value, GetArena());
}
inline std::string* CameraServerResult::_internal_mutable_result_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.result_str_.Mutable( GetArena());
}
inline std::string* CameraServerResult::release_result_str() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:mavsdk.rpc.camera_server.CameraServerResult.result_str)
  return _impl_.result_str_.Release();
}
inline void CameraServerResult::set_allocated_result_str(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.result_str_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.result_str_.IsDefault()) {
          _impl_.result_str_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.camera_server.CameraServerResult.result_str)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace camera_server
}  // namespace rpc
}  // namespace mavsdk


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::mavsdk::rpc::camera_server::CameraServerResult_Result> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::camera_server::CameraServerResult_Result>() {
  return ::mavsdk::rpc::camera_server::CameraServerResult_Result_descriptor();
}
template <>
struct is_proto_enum<::mavsdk::rpc::camera_server::TakePhotoFeedback> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::mavsdk::rpc::camera_server::TakePhotoFeedback>() {
  return ::mavsdk::rpc::camera_server::TakePhotoFeedback_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_camera_5fserver_2fcamera_5fserver_2eproto_2epb_2eh
