// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: lumos_server/lumos_server.proto

#include "lumos_server/lumos_server.pb.h"
#include "lumos_server/lumos_server.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace lumos_server {

static const char* LumosServerService_method_names[] = {
  "/mavsdk.rpc.lumos_server.LumosServerService/SetDroneInfo",
  "/mavsdk.rpc.lumos_server.LumosServerService/SetCompanionStatus",
  "/mavsdk.rpc.lumos_server.LumosServerService/SubscribeDance",
  "/mavsdk.rpc.lumos_server.LumosServerService/SubscribeParams",
  "/mavsdk.rpc.lumos_server.LumosServerService/SubscribeStart",
  "/mavsdk.rpc.lumos_server.LumosServerService/SubscribeLocalPos",
  "/mavsdk.rpc.lumos_server.LumosServerService/SubscribeGlobalPos",
};

std::unique_ptr< LumosServerService::Stub> LumosServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LumosServerService::Stub> stub(new LumosServerService::Stub(channel, options));
  return stub;
}

LumosServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SetDroneInfo_(LumosServerService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetCompanionStatus_(LumosServerService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeDance_(LumosServerService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeParams_(LumosServerService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeStart_(LumosServerService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeLocalPos_(LumosServerService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeGlobalPos_(LumosServerService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status LumosServerService::Stub::SetDroneInfo(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SetDroneInfoRequest& request, ::mavsdk::rpc::lumos_server::SetDroneInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::lumos_server::SetDroneInfoRequest, ::mavsdk::rpc::lumos_server::SetDroneInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetDroneInfo_, context, request, response);
}

void LumosServerService::Stub::async::SetDroneInfo(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SetDroneInfoRequest* request, ::mavsdk::rpc::lumos_server::SetDroneInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::lumos_server::SetDroneInfoRequest, ::mavsdk::rpc::lumos_server::SetDroneInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDroneInfo_, context, request, response, std::move(f));
}

void LumosServerService::Stub::async::SetDroneInfo(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SetDroneInfoRequest* request, ::mavsdk::rpc::lumos_server::SetDroneInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetDroneInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lumos_server::SetDroneInfoResponse>* LumosServerService::Stub::PrepareAsyncSetDroneInfoRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SetDroneInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::lumos_server::SetDroneInfoResponse, ::mavsdk::rpc::lumos_server::SetDroneInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetDroneInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lumos_server::SetDroneInfoResponse>* LumosServerService::Stub::AsyncSetDroneInfoRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SetDroneInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetDroneInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LumosServerService::Stub::SetCompanionStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SetCompanionStatusRequest& request, ::mavsdk::rpc::lumos_server::SetCompanionStatusResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::mavsdk::rpc::lumos_server::SetCompanionStatusRequest, ::mavsdk::rpc::lumos_server::SetCompanionStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetCompanionStatus_, context, request, response);
}

void LumosServerService::Stub::async::SetCompanionStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SetCompanionStatusRequest* request, ::mavsdk::rpc::lumos_server::SetCompanionStatusResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::mavsdk::rpc::lumos_server::SetCompanionStatusRequest, ::mavsdk::rpc::lumos_server::SetCompanionStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCompanionStatus_, context, request, response, std::move(f));
}

void LumosServerService::Stub::async::SetCompanionStatus(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SetCompanionStatusRequest* request, ::mavsdk::rpc::lumos_server::SetCompanionStatusResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetCompanionStatus_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lumos_server::SetCompanionStatusResponse>* LumosServerService::Stub::PrepareAsyncSetCompanionStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SetCompanionStatusRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::mavsdk::rpc::lumos_server::SetCompanionStatusResponse, ::mavsdk::rpc::lumos_server::SetCompanionStatusRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetCompanionStatus_, context, request);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::lumos_server::SetCompanionStatusResponse>* LumosServerService::Stub::AsyncSetCompanionStatusRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SetCompanionStatusRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetCompanionStatusRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::mavsdk::rpc::lumos_server::DanceResponse>* LumosServerService::Stub::SubscribeDanceRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeDanceRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::lumos_server::DanceResponse>::Create(channel_.get(), rpcmethod_SubscribeDance_, context, request);
}

void LumosServerService::Stub::async::SubscribeDance(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeDanceRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::lumos_server::DanceResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::lumos_server::DanceResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeDance_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::lumos_server::DanceResponse>* LumosServerService::Stub::AsyncSubscribeDanceRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeDanceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::lumos_server::DanceResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeDance_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::lumos_server::DanceResponse>* LumosServerService::Stub::PrepareAsyncSubscribeDanceRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeDanceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::lumos_server::DanceResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeDance_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::lumos_server::ParamsResponse>* LumosServerService::Stub::SubscribeParamsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeParamsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::lumos_server::ParamsResponse>::Create(channel_.get(), rpcmethod_SubscribeParams_, context, request);
}

void LumosServerService::Stub::async::SubscribeParams(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeParamsRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::lumos_server::ParamsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::lumos_server::ParamsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeParams_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::lumos_server::ParamsResponse>* LumosServerService::Stub::AsyncSubscribeParamsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeParamsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::lumos_server::ParamsResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeParams_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::lumos_server::ParamsResponse>* LumosServerService::Stub::PrepareAsyncSubscribeParamsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeParamsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::lumos_server::ParamsResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeParams_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::lumos_server::StartResponse>* LumosServerService::Stub::SubscribeStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeStartRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::lumos_server::StartResponse>::Create(channel_.get(), rpcmethod_SubscribeStart_, context, request);
}

void LumosServerService::Stub::async::SubscribeStart(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeStartRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::lumos_server::StartResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::lumos_server::StartResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeStart_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::lumos_server::StartResponse>* LumosServerService::Stub::AsyncSubscribeStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeStartRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::lumos_server::StartResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeStart_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::lumos_server::StartResponse>* LumosServerService::Stub::PrepareAsyncSubscribeStartRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeStartRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::lumos_server::StartResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeStart_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::lumos_server::LocalPosResponse>* LumosServerService::Stub::SubscribeLocalPosRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeLocalPosRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::lumos_server::LocalPosResponse>::Create(channel_.get(), rpcmethod_SubscribeLocalPos_, context, request);
}

void LumosServerService::Stub::async::SubscribeLocalPos(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeLocalPosRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::lumos_server::LocalPosResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::lumos_server::LocalPosResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeLocalPos_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::lumos_server::LocalPosResponse>* LumosServerService::Stub::AsyncSubscribeLocalPosRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeLocalPosRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::lumos_server::LocalPosResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeLocalPos_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::lumos_server::LocalPosResponse>* LumosServerService::Stub::PrepareAsyncSubscribeLocalPosRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeLocalPosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::lumos_server::LocalPosResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeLocalPos_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::lumos_server::GlobalPosResponse>* LumosServerService::Stub::SubscribeGlobalPosRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeGlobalPosRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::lumos_server::GlobalPosResponse>::Create(channel_.get(), rpcmethod_SubscribeGlobalPos_, context, request);
}

void LumosServerService::Stub::async::SubscribeGlobalPos(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeGlobalPosRequest* request, ::grpc::ClientReadReactor< ::mavsdk::rpc::lumos_server::GlobalPosResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::lumos_server::GlobalPosResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeGlobalPos_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::lumos_server::GlobalPosResponse>* LumosServerService::Stub::AsyncSubscribeGlobalPosRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeGlobalPosRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::lumos_server::GlobalPosResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeGlobalPos_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::lumos_server::GlobalPosResponse>* LumosServerService::Stub::PrepareAsyncSubscribeGlobalPosRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::lumos_server::SubscribeGlobalPosRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::lumos_server::GlobalPosResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeGlobalPos_, context, request, false, nullptr);
}

LumosServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LumosServerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LumosServerService::Service, ::mavsdk::rpc::lumos_server::SetDroneInfoRequest, ::mavsdk::rpc::lumos_server::SetDroneInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LumosServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::lumos_server::SetDroneInfoRequest* req,
             ::mavsdk::rpc::lumos_server::SetDroneInfoResponse* resp) {
               return service->SetDroneInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LumosServerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LumosServerService::Service, ::mavsdk::rpc::lumos_server::SetCompanionStatusRequest, ::mavsdk::rpc::lumos_server::SetCompanionStatusResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LumosServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::lumos_server::SetCompanionStatusRequest* req,
             ::mavsdk::rpc::lumos_server::SetCompanionStatusResponse* resp) {
               return service->SetCompanionStatus(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LumosServerService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LumosServerService::Service, ::mavsdk::rpc::lumos_server::SubscribeDanceRequest, ::mavsdk::rpc::lumos_server::DanceResponse>(
          [](LumosServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::lumos_server::SubscribeDanceRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::lumos_server::DanceResponse>* writer) {
               return service->SubscribeDance(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LumosServerService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LumosServerService::Service, ::mavsdk::rpc::lumos_server::SubscribeParamsRequest, ::mavsdk::rpc::lumos_server::ParamsResponse>(
          [](LumosServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::lumos_server::SubscribeParamsRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::lumos_server::ParamsResponse>* writer) {
               return service->SubscribeParams(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LumosServerService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LumosServerService::Service, ::mavsdk::rpc::lumos_server::SubscribeStartRequest, ::mavsdk::rpc::lumos_server::StartResponse>(
          [](LumosServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::lumos_server::SubscribeStartRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::lumos_server::StartResponse>* writer) {
               return service->SubscribeStart(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LumosServerService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LumosServerService::Service, ::mavsdk::rpc::lumos_server::SubscribeLocalPosRequest, ::mavsdk::rpc::lumos_server::LocalPosResponse>(
          [](LumosServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::lumos_server::SubscribeLocalPosRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::lumos_server::LocalPosResponse>* writer) {
               return service->SubscribeLocalPos(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LumosServerService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LumosServerService::Service, ::mavsdk::rpc::lumos_server::SubscribeGlobalPosRequest, ::mavsdk::rpc::lumos_server::GlobalPosResponse>(
          [](LumosServerService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::mavsdk::rpc::lumos_server::SubscribeGlobalPosRequest* req,
             ::grpc::ServerWriter<::mavsdk::rpc::lumos_server::GlobalPosResponse>* writer) {
               return service->SubscribeGlobalPos(ctx, req, writer);
             }, this)));
}

LumosServerService::Service::~Service() {
}

::grpc::Status LumosServerService::Service::SetDroneInfo(::grpc::ServerContext* context, const ::mavsdk::rpc::lumos_server::SetDroneInfoRequest* request, ::mavsdk::rpc::lumos_server::SetDroneInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LumosServerService::Service::SetCompanionStatus(::grpc::ServerContext* context, const ::mavsdk::rpc::lumos_server::SetCompanionStatusRequest* request, ::mavsdk::rpc::lumos_server::SetCompanionStatusResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LumosServerService::Service::SubscribeDance(::grpc::ServerContext* context, const ::mavsdk::rpc::lumos_server::SubscribeDanceRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::lumos_server::DanceResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LumosServerService::Service::SubscribeParams(::grpc::ServerContext* context, const ::mavsdk::rpc::lumos_server::SubscribeParamsRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::lumos_server::ParamsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LumosServerService::Service::SubscribeStart(::grpc::ServerContext* context, const ::mavsdk::rpc::lumos_server::SubscribeStartRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::lumos_server::StartResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LumosServerService::Service::SubscribeLocalPos(::grpc::ServerContext* context, const ::mavsdk::rpc::lumos_server::SubscribeLocalPosRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::lumos_server::LocalPosResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LumosServerService::Service::SubscribeGlobalPos(::grpc::ServerContext* context, const ::mavsdk::rpc::lumos_server::SubscribeGlobalPosRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::lumos_server::GlobalPosResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace lumos_server

